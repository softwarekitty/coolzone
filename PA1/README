
This submission was done by Carl Chapman, a team of one!

Questions on PA1
----------------

1. Describe your implementation of the stack machine in a single short
   paragraph.
   
   The main loop prints prompts and calls 'respond(input,stack)' until input="x".
   respond(...) switches what to do with the stack, depending on the input.
   The 'El' (for element) class helps to build a stack of elements in the style of a 
   singly linked list, so each element can get a 'next' element.  The CustomStack
   starts out with a dummy element, and a pointer to the current 'top' of the stack.
   On inputs '+', 's' or any int, 'respond' pushes elements (extending El) onto the stack. 
   'd' calls printElement(), iterating through non-dummy elements (using getNext()) in the 
   stack starting at the top.  'e' finds the type of the top element and then adds or 
   swaps elements as needed.  
   

2. List 3 things that you like about the Cool programming language.
    FYI I am not crazy about the Cool language, but it is manageable.  I hope it was 
    designed to make writing a compiler easier.
    1. strongly typed
    2. has OO/inheritance features
    3. has basic features: loops, scoped variables with let, type matching, built in basic IO


3. List 3 things you DON'T like about Cool.
    1. rules for use of brackets and semi-colon are not intuitive or following the 
        conventions of other languages, looks bad and I still am not sure I get it
    2. more trouble than usual to declare a non-global variable, (can be done with let)
    3. poor platform support - depending on spim was a poor choice for accessibility.  spim requires linux 
        with certain libraries.  IMHO, this is simple enough to be supported on all platforms without spim.

